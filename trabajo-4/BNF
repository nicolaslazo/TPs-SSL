%{  /* seccion de definiciones */

#DEFINE YYDEBBUG 1

%}

%%

%union{
	char  *t_cadena;
	float t_float;
	int t_entero;
	int t_tipo;	
}

/* los tokens son los simbolos no temrinales, type son los terminales */
%token <t_float>NUM
%token <t_cadena>IDENTIFICADOR
%token <t_cadena>LITERALCADENA //nose si esta bien el tipo q le puse
%token MAYORIGUAL MENORIGUAL
%token DESIGUALDAD IGUALDAD
%token AND OR
%type exp

%left '='
%right OR
%right AND
%right '<' '>' MAYORIGUAL MENORIGUAL		//aca faltaria igualdad,desigualdad, y en las reglas gramaticales tmb
%right '+' '-'
%right '*' '/' '%'
%right '^'

%%     /* Reglas gramaticales y las acciones */

exp:
	| exp '=' exp 			{$$ = $1}
	| exp OR exp			{$$ = $1 OR $3; }
	| exp AND exp			{$$ = $1 AND $3; }
	| exp MAYORIGUAL exp		{$$ = $1 MAYORIGUAL $3; }
	| exp '>' exp			{$$ = $1 > $3}
	| exp MENORIGUAL exp		{$$ = $1 MENORIGUAL $3; }
	| exp '<' exp			{$$ = $1 < $3}
	| exp '+' exp   		{$$ = $1 + $3; } 
	| exp '-' exp   		{$$ = $1 - $3; }
	| exp '*' exp   		{$$ = $1 * $3; }
	| exp '/' exp   		{ if($3!=0){
						$$ = $1/$3;
					 }else{ printf("\n Valor no reconocido para la division.");} } //nose si esto esta bien con poner solo el printf o es con el flag_error=1
	| exp '^' exp   		{$$ = pow($1, $3); }
	| IDENTIFICADOR
	| NUM
	| LITERALCADENA

void yyerror(char *s){ 
	printf("\n Esta sentencia es incorrecta : %s, s);
	printf("\n Presione cualquier tecla para salir...");
	/* getch() NOSE SI SE PUEDE PONER*/
}

main(){
	yyparse();	
}
