Tipos de declaracion:
	int a;
	int a = 5;
	int a, b, c;
	int a=3, b, c, d=1;

<sentenciaDeclaracion>: TIPO_DATO <listaIdentificadores> ;

/* NOTA: en Bison no se usa <>. Eso se usa para representar a los no terminales */

<listaIdentificadores>: <identificadorA>
			| <identificadorA> ',' <listaIdentificadores>

<identificadorA>: IDENTIFICADOR
		| IDENTIFICADOR '=' <expresion>
		| IDENTIFICADOR '[' <expresion> ']'

<expresion>: NUM

// Conjunto token: { NUM, IDENTIFICADOR, TIPO_DATO, todos los caracteres simples }


* En el archivo .y se puede ejecutar codigo entre simbolos
	NoTerminal --> Simbolo1 /* Bloque de codigo 1 */ Simbolo2 /* Bloque de codigo 2*/ ... SimboloN /* Bloque de codigo n */
* Obviamente esos bloques no son obligatorios. Ademas, esos bloques solo pueden referenciar simbolos que aparecen atras de ellos


* error es un token especial de error de bison. Necesita que se le especifique el punto de corte para que el error no reporte todo hasta el final del archivo como un solo error. El profe escribe
	caracterDeCorte: 	',' | ';' | '='

* Se usa %verbose para output verbose

* Para cadenas no reconocidas:
	.* 	{ return CADENA_NO_VALIDA; }



%left '='
%right OR
%right AND
%right '<' '>' MAYORIGUAL MENORIGUAL
%right '+' '-'
%right '*' '/' '%'
%right '^'



exp: 	exp '=' exp
	exp OR exp
	exp AND exp
	exp MAYORIGUAL exp
	exp '>' exp
	exp MENORIGUAL exp
	exp '<' exp
	exp '+' exp
	exp '-' exp
	exp '*' exp
	exp '/' exp
	exp '^' exp
	expUnaria
